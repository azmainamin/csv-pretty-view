{"version":3,"sources":["components/Datatable/DatatableView.jsx","components/Datatable/DatatableContainer.jsx","core/ParseCSV.js","components/UploadButton/UploadButton.jsx","components/CSVReader/CSVReaderView.jsx","components/CSVReader/CSVReaderContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","border","backgroundColor","color","palette","primary","main","paddingTop","cursor","maxHeight","DatatableView","props","data","columns","options","classes","Grid","container","spacing","justify","alignItems","item","className","title","Datatable","loading","CircularProgress","tableData","filter","row","undefined","removeEmptyRows","selectableRows","rowsPerPage","rowsPerPageOptions","elevation","responsive","print","fixedHeaderOptions","xAxis","yAxis","margin","button","UploadButtons","handleClick","disabled","children","Button","onClick","variant","csvParserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","CSVReaderView","handleFileLoad","cssClass","cssInputClass","label","onFileLoaded","parserOptions","inputId","inputStyle","display","Typography","component","gutterBottom","CSVReaderContainer","state","columnNames","uploadCsvFileData","bind","result","this","getColumnNames","setState","Object","keys","length","style","marginTop","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.999748b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& .MuiToolbar-root\": {\r\n      border: \"1px solid #d8d8d8\",\r\n      backgroundColor: \"rgba(0, 0, 0, 0.04)\"\r\n    },\r\n    \"& .MuiButtonBase-root\": {\r\n      \"&:focus,&:hover\": {\r\n        color: theme.palette.primary.main\r\n      }\r\n    },\r\n    \"& .MuiTableSortLabel-root\": {\r\n      paddingTop: \"6px\"\r\n    },\r\n    \"& .MUIDataTableToolbar-icon\": {\r\n      \"&:hover\": {\r\n        color: theme.palette.primary.main\r\n      }\r\n    },\r\n    \"& .MUIDataTableToolbar-iconActive\": {\r\n      color: theme.palette.primary.main\r\n    },\r\n    \"& .MUIDataTableBodyRow-root\": {\r\n      cursor: \"pointer\"\r\n    },\r\n    /**\r\n     * @description This !important override is needed to resolve a bug in mui-datatables resulting in no height responsiveness on the table.\r\n     * When the table is set to \"scrollMaxHeight\" (where the entire table view fits into the content area) an arbitrary maxHeight of 499px is\r\n     * set with no relation to the size of the container in which the table was rendered. No other \"responsive\" prop exists currently that\r\n     * fixes/helps this issue, the only solution currently available is stomping out the maxHeight attribute.\r\n     */\r\n    \"& .MUIDataTable-responsiveScrollMaxHeight-313\": {\r\n      maxHeight: \"calc(100vh - 400px) !important\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function DatatableView(props) {\r\n  const { data, columns, options } = props;\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\r\n      <Grid item>\r\n        <MUIDataTable\r\n          className={classes.root}\r\n          title={\"Ugly CSV prettified\"}\r\n          data={data}\r\n          columns={columns}\r\n          options={options}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport DatatableView from \"./DatatableView\";\r\nimport { removeEmptyRows } from \"../../core/ParseCSV\";\r\n\r\nexport default function Datatable(props) {\r\n  const { data, loading, columns } = props;\r\n  function getDatatableOptions() {\r\n    return {\r\n      selectableRows: true,\r\n      rowsPerPage: 100,\r\n      rowsPerPageOptions: [50, 100, 250],\r\n      elevation: 1,\r\n      responsive: \"scrollMaxHeight\",\r\n      print: false,\r\n      fixedHeaderOptions: {\r\n        xAxis: false,\r\n        yAxis: true\r\n      },\r\n    };\r\n  }\r\n\r\n  if (loading) {\r\n    return <CircularProgress />;\r\n  } else {\r\n    const tableData = removeEmptyRows(data);\r\n    return <DatatableView data={tableData} columns={columns} options={getDatatableOptions()}/>;\r\n  }\r\n}\r\n","/**\r\n * Removes empty rows\r\n * @param {*} tableData \r\n */\r\nexport function removeEmptyRows(tableData) {\r\n  return tableData.filter(row => row !== undefined && row !== \"\");\r\n}\r\n\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(3)\r\n    }\r\n  },\r\n  button : {\r\n    cursor: 'auto'\r\n  }\r\n}));\r\n\r\nexport default function UploadButtons(props) {\r\n  const classes = useStyles();\r\n\r\n  const { handleClick, disabled, children } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Button color='primary'\r\n        className={classes.button}\r\n        onClick={handleClick}\r\n        variant=\"contained\"\r\n        disabled={disabled}\r\n      >\r\n        {children}\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport CSVReader from \"react-csv-reader\";\r\nimport UploadButton from \"../UploadButton/UploadButton\";\r\n\r\nimport \"./csvReader.css\";\r\n\r\nconst csvParserOptions = {\r\n  header: true,\r\n  dynamicTyping: true,\r\n  skipEmptyLines: true,\r\n  transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\r\n};\r\n\r\nexport default function CSVReaderView(props) {\r\n  const { handleFileLoad } = props;\r\n  return (\r\n    <div>\r\n      <UploadButton>\r\n        <CSVReader\r\n          cssClass=\"csv-reader-input\"\r\n          cssInputClass=\"csv-input\"\r\n          label=\"Upload CSV\"\r\n          onFileLoaded={handleFileLoad}\r\n          parserOptions={csvParserOptions}\r\n          inputId=\"csv-reader\"\r\n          inputStyle={{ display: \"none\" }}\r\n        />\r\n      </UploadButton>\r\n      <Typography component=\"h2\" variant=\"h6\" gutterBottom>\r\n        Make sure the first row of your CSV file has the column names.\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DatatableContainer from \"../Datatable/DatatableContainer\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport CSVReaderView from \"./CSVReaderView\";\r\n\r\nclass CSVReaderContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      data: [],\r\n      columnNames:[]\r\n    };\r\n\r\n    this.uploadCsvFileData = this.uploadCsvFileData.bind(this);\r\n  }\r\n\r\n  uploadCsvFileData(result) {\r\n    const columnNames = this.getColumnNames(result[0]);\r\n\r\n    this.setState({ data: result, columnNames:columnNames, loading: false });\r\n  }\r\n\r\n  getColumnNames(row) {\r\n    return Object.keys(row)\r\n  }\r\n\r\n  render() {\r\n    const { loading, data, columnNames } = this.state;\r\n\r\n    if (!loading && data.length === 0) {\r\n      return (\r\n        <div>\r\n          <CSVReaderView handleFileLoad={this.uploadCsvFileData} />\r\n        </div>\r\n      );\r\n    } else if (!loading && data.length > 0) {\r\n      return (\r\n        <div>\r\n          <CSVReaderView handleFileLoad={this.uploadCsvFileData} />\r\n          <DatatableContainer\r\n            data={this.state.data}\r\n            loading={this.state.loading}\r\n            columns={columnNames}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return <CircularProgress style={{marginTop: 25}}/>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSVReaderContainer;\r\n","import React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport CSVReaderContainer from \"./components/CSVReader/CSVReaderContainer\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={{ backgroundColor: \"whitesmoke\" }}>\r\n      <header className=\"app-header\">\r\n        <Typography style={{marginTop: 105}} component=\"h1\" variant=\"h1\" gutterBottom>\r\n          CSV Reader\r\n        </Typography>\r\n      </header>\r\n      <CSVReaderContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}